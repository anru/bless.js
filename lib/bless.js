// Generated by CoffeeScript 1.10.0
(function() {
  var SELECTOR_LIMIT, bless, createAst, css;

  css = require('css');

  SELECTOR_LIMIT = 4095;

  createAst = function(rules) {
    return {
      type: 'stylesheet',
      stylesheet: {
        rules: rules
      }
    };
  };

  bless = function(data, limit) {
    var ast, i, j, len, len1, nestedRule, newAsts, newData, numNestedRuleSelectors, numSelectors, ref, ref1, rule, rulesCache, startNewAst, totalNumSelectors;
    if (limit == null) {
      limit = SELECTOR_LIMIT;
    }
    ast = css.parse(data);
    numSelectors = 0;
    totalNumSelectors = 0;
    rulesCache = [];
    newAsts = [];
    startNewAst = function() {
      newAsts.push(createAst(rulesCache));
      rulesCache = [];
      return numSelectors = 0;
    };
    ref = ast.stylesheet.rules;
    for (i = 0, len = ref.length; i < len; i++) {
      rule = ref[i];
      switch (rule.type) {
        case 'rule':
          if (numSelectors + rule.selectors.length > limit) {
            startNewAst();
          }
          numSelectors += rule.selectors.length;
          totalNumSelectors += rule.selectors.length;
          break;
        case 'comment':
          break;
        case 'charset':
          break;
        case 'keyframes':
          continue;
        default:
          numNestedRuleSelectors = 0;
          ref1 = rule.rules;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            nestedRule = ref1[j];
            numNestedRuleSelectors += nestedRule.selectors.length;
          }
          if (numSelectors + numNestedRuleSelectors > limit) {
            startNewAst();
          }
          numSelectors += numNestedRuleSelectors;
          totalNumSelectors += numNestedRuleSelectors;
      }
      rulesCache.push(rule);
      if (numSelectors === limit) {
        startNewAst();
      }
    }
    if (rulesCache.length) {
      newAsts.push(createAst(rulesCache));
    }
    newData = (function() {
      var k, len2, results;
      results = [];
      for (k = 0, len2 = newAsts.length; k < len2; k++) {
        ast = newAsts[k];
        results.push(css.stringify(ast));
      }
      return results;
    })();
    return {
      data: newData,
      numSelectors: totalNumSelectors
    };
  };

  module.exports = bless;

}).call(this);
